


题    目： 基于uniapp的电子书阅读应用设计实现
       专    业：  计算机科学与技术（嵌入式）
       班    级：   计软1501
       姓    名：   陈佳伟
       指导老师：   靡元根
       起讫日期：   



2019年   6  月
 
基于uniapp的电子书阅读应用设计与实现
摘要
随着计算机技术的不断进步和信息资源的高速膨胀，数字阅读的需求迅速扩大，给作为电子文档载体的电子书带来良好的发展机遇。伴随着互联网技术的飞速发展，阅读，已经成为人们日常生活中必不可少的信息获取方式之一。而传统行业，例如图书、杂志、报纸等阅读工具，也与时俱进的进入了互联网的大舞台。基于网络信息的存储自由，信息传播的飞速性，信息传播的廉价性，绝大部分图书都有相应的电子版式。这样，既节约了流通成本，又增加了传播途径与力度，得到了显著的传播效果。人们也从而习惯了在网上寻找，购买、阅读自己喜爱的书籍。同时，智能手机的出现，也给用户提供了更多阅读的时间，更加便携的阅读平台，以及更碎片化的阅读方式。这些优点，都极大的促进了阅读电子化的发展。 
然而，目前由于终端花样繁多，仅手机端所有的操作系统就有Android、iOS两大平台，电脑所拥有的操作系统也有Windows、MacOS之别，国内的小程序平台更是花样繁多，微信app、百度app、支付宝app等国民级别应用都拥有自己的小程序平台，在这些平台上实现体验统一化是一个很漫长的过程，在此过渡时期，可行的解决办法就是尽可能的适配多样化的软件平台，从软件端屏蔽平台带来的差异。本课题需要对市面上主流的电子书平台进行探究、评估，设计与开发一款可以适配多种平台的电子书应用软件。在历史的发展洪流下，诞生了很多的软件平台，每一款软件平台不管是制作上还是使用上，体验均为上乘，但考虑到多端覆盖，每一端的体验有着较大的割裂感。本课题正是使用了取其精华，去其糟粕的做法，集各家所长，尽可能在覆盖面和使用上取得好的效果。
论文详细阐述了“轻读”这一阅读应用的设计和实现过程。整个应用采用MVVM模型，采用典型的前后端分离架构实现，通过json在前后端传递数据，前端基于Vue.js而设计，后端则采用流行的flask框架提供restful服务。数据库使用了主流的MySQL，连接则采用python的插件pyMySQL。
整个应用划分功能详细，包含电子书阅读，注册登录，阅读设置等内容，应用功能划分细致，提供了较为良好的用户体验。

关键词：Vue.js  epub电子书  MVVM  JSON
 
Design and Implementation of epub-book Reading Application Based on Uniapp
Abstract
   With the continuous advancement of computer technology and the rapid expansion of information resources, the demand for digital reading has rapidly expanded, bringing good development opportunities to e-books as electronic document carriers. With the rapid development of Internet technology, reading has become one of the indispensable ways of obtaining information in people's daily life. Traditional industries, such as books, magazines, newspapers and other reading tools, have also entered the big stage of the Internet with the times. The freedom of storage based on network information, the rapidity of information dissemination, and the low cost of information dissemination, most books have corresponding electronic layouts. In this way, it not only saves the circulation cost, but also increases the transmission route and intensity, and has achieved remarkable communication effects. People are also used to finding, buying and reading their favorite books online. At the same time, the emergence of smart phones has also provided users with more reading time, a more portable reading platform, and a more fragmented reading method. These advantages have greatly promoted the development of reading electronic.
However, due to the variety of terminal devices, the operating system of the mobile phone has two platforms: Android and iOS. The operating system owned by the computer also has Windows and MacOS. The domestic small program platform is more diverse, WeChat app, Baidu app, Alipay. App and other national-level applications all have their own small program platform. It is a very long process to realize the unification of experience on these platforms. In this transitional period, the feasible solution is to adapt the diversified software platform as much as possible. The software side shields the platform to bring the difference. This topic needs to explore and evaluate the mainstream e-book platform on the market, and design and develop an e-book application software that can adapt to multiple platforms. Under the torrent of historical development, many software platforms have been born. Each software platform is superior in terms of production and use. However, considering the multi-end coverage, the experience at each end has a large split. This topic is the use of the essence, to the practice of dross, set the strengths of each family, as far as possible to achieve good results in coverage and use.
The paper elaborates on the design and implementation process of the “light reading” reading application. The whole application adopts the MVVM model, which is implemented by a typical front-end separation architecture. The data is passed through the json at the front and back ends. The front end is designed based on Vue.js, and the back end uses the popular flask framework to provide restful services. The database uses the mainstream MySQL, and the connection uses the python plugin pyMySQL.
The entire application division function is detailed, including e-book reading, registration and registration, reading settings, etc., and the application functions are divided into meticulous functions, providing a relatively good user experience.

Keywords:  Vue.js;  epub-book;  MVVM;  JSON









 
第一章 绪论
1.1	课题研究的背景
	古有高尔基言：书籍，是人类进步的阶梯；书籍，在人类的发展史上，有着重要的作用。随着造纸术的逐渐传播与流行，纸质书籍的发展也如日中天，成为了重要的文化载体。到了21世纪，在电子器件越来越便宜，发展越来越广泛的大背景之下，书籍电子化也似从前纸质书籍发展般来势汹汹，各种各样的电子阅读硬件与软件也是遍地开花，消费者在选择时往往不知所措，无法选择到真正合适自己的产品。
现如今，市场上的阅读软件主流平台有qq阅读，网易云阅读，掌阅iReader，书旗小说等app，这类app在占领市场95%份额的前提下，难免会有开屏广告、内置会员等破坏消费者体验的行为。而且这类app尽管已经将阅读体验提升到极致，却容易忽略阅读最本质最核心的东西——内容。在内容为王的时代，多终端同步，随时随地随心阅读，给予用户最纯粹的阅读体验，才是一款阅读软件应该拥有的最本源的东西。

1.2	课题研究的意义
	经过大量的文献翻阅，以及市场调查发现，vue.js作为一款渐进式前端框架，很适合开发单页应用。在webpack打包工具加持下，单页应用完全可以像app一样流畅好用，同时也省下了用户下载、安装app的烦恼。尤其是现如今网络流量越来越廉价的情况下，用户更愿意接触到上手即用，用完即走的工具，而不是浪费时间的下载安装，甚至还需要其他更多操作的工具。基于此现状，该应用开发可以使用vue.js渐进式前端框架，来开发单页应用。
研究该应用具有很高的价值，具体体现在：
	1、干净简洁
	一切功能为阅读而生，除去阅读以外无任何附加功能，用户可以全身心地沉浸在阅读之中，而无需考虑其他内容。
	2、用完即走
	点开链接，使用一次过后即会自动加载您上次的阅读格式与设置，除去进度功能点以外，其余设置均可以自动修改与保存。
	3、使用轻便
	用户不需要操心手机还有多少剩余内存，不需要担心手机太老而不支持，无需安装任何应用，只需要现代化的一款浏览器，就可以完美的运行该应用。

1.3	系统设计思想
本管理系统要做到整体结构清晰，操作流畅，功能划分清楚，详细设计思想如下：
1、各个功能划分要有合理的用户操作方式，根据用户使用次数多少有别，可以同一功能增加多个操作入口；
2、由于基本所有资源都要从网络下载，资源的速度要求不能过慢且有良好的提示；
3、后台数据库表结构划分清楚，尽量按照一表一职责，一张表只负责单一种类的数据；
4、由于需要较多的网络请求，请求时间较长，需要给用户合理的提示；
5、 能进行本地处理的尽可能在本地处理，减少网络请求导致的流量消耗。

1.4	本论文的内容组织结构
    第一章 绪论：主要介绍课题的背景，意义以及设计思想。
    第二章 开发工具与开发技术：介绍系统开发所使用的技术，语言进行介绍。
    第三章 系统分析：对系统进行可行性分析，功能分析以及数据库的分析。
    第四章 数据库设计：包含总体结构设计、数据库设计、模块功能设计。
	第五章 系统界面和代码实现：展示系统的各个功能界面和关键性的代码。
    第六章 总结与展望：对整个项目的开发过程和可完善的地方进行总结。
 
第二章 开发技术和开发工具
2.1	运行环境
本系统采用VS Code作为开发工具，vue.js、uni-app作为前端页面展示，Nginx作为页面、静态资源服务器，MySQL提供服务端后台数据，python web框架Flask提供服务端支撑，python pyMySQL提供数据库连接服务。

2.2	开发工具简介
1.VS Code，全称为Microsoft visual studio code，一个可运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。VS code是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux。vscode  作为一款逐渐火热的编辑器。它的特点免费、开源、多平台，以及集成git，代码调试，插件丰富等优点，被大家逐渐熟知和认可。
2.Vue.js Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。
3. uni-app， 是一个使用 Vue.js 开发跨平台应用的前端框架，开发者编写一套代码，可编译到iOS、Android、H5、小程序等多个平台。Uni-app在设计当初就考虑到不同平台的兼容性，借鉴整合了 Vue.js、mpvue 等前端开源框架。同时，为保证微信小程序兼容，uni-app 还借鉴了微信小程序的组件规范。
4. Nginx，是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。Nginx的优势有：使用基于事件驱动架构，使得其可以支持数以百万级别的TCP连接；高度的模块化和自由软件许可证使得第三方模块层出不穷；Nginx是一个跨平台服务器，可以运行在Linux，Windows，FreeBSD，Solaris，AIX，Mac OS等操作系统上。
5. MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS 应用软件之一。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。MySQL 所使用的 SQL 语言是用于访问数据库的最常用标准化语言。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。由于其社区版的性能卓越，搭配 PHP 和 Apache 可组成良好的开发环境。
6. Flask, 是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架，对于Werkzeug本质是Socket服务端，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户。微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展。Flask 不会替你默认选择某个方案——比如使用何种数据库。而那些 Flask 所选择的，比如使用何种模板引擎——则很容易替换。

2.3  本章小结
	本章主要介绍了个人学习管理系统开发过程中涉及的相关背景知识，内容包括开发环境和开发工具。 
第三章 系统分析
	本章将要对应用进行大体的分析与讨论，将可行性与功能点进行一一阐述，并给出具体的流程图。
3.1  可行性分析
经济可行性：该应用从电子书市场切入，相较于其他阅读软件广告较多，内容繁杂等缺点，干净简洁是该应用提供给用户纯净阅读体验的保障之一。而且目前市场上并没有在浏览器内就可以完成注册登陆阅读设置全套功能的应用，如果将其推广开来，其简洁的应用风格将会对阅读app市场产生较大影响。那些只需要读书的用户群体便可以抛弃收费巨高，开屏广告满天飞的软件，从而选择该应用。
技术可行性：该应用前端采用了vue.js的渐进式前端框架，在技术支持方面，目前vue.js在GitHub上的star数已经达到了139k（截止2019年5月18日），开发作者尤雨溪也是中国人，不管是教程还是论坛，对中文的支持都非常棒，而且开发论坛每时每刻都有开发者在讨论，参与vue.js的进步。而后端在而采用的是flask轻量级web服务框架，它的GitHub star数也有44k之多（截止2019年5月18日），在庞大的用户群体基础上，遇到的大部分问题都能迅速有效地解决。
操作可行性：该应用界面参考了qq阅读、掌阅、书旗小说、多看阅读等多款“国民级别”APP，在使用操作上，用户可以迅速的适应，并流畅操作该应用。应用也为一部分高频操作入口分散至多个页面，符合用户阅读电子书的习惯。每个页面都有类似于native的标题栏，使用清晰，一目了然，还将部分数据缓存在本地，以便用户快速恢复上次的阅读。

3.2  应用功能描述
	该应用涉及到的功能较多，而且很多功能需要服务端和客户端密切配合完
成，模块划分如下：

3.2.1	电子书阅读功能
	电子书阅读模块支持阅读epub格式的电子书籍，用户可以选择自己喜欢的epub电子书进行阅读。

3.2.2	用户登陆注册功能
	用户可以使用自己喜欢的用户名和密码进行注册，再注册完成之后可以进行登录。在登录成功时，本地可以将用户的登陆信息缓存下来，并且在用户下次打开时加载登陆信息，避免重复登陆。

3.2.3	阅读设置
	这是一个离线功能，不涉及服务端。用户可以在阅读图书时设置相关的字号、背景颜色，以及通过拖拽的形式调整用户的阅读进度。用户在修改不满意时可以随时调整个人设置。

3.2.4	默认设置
	相似于阅读设置，但该设置会联网保存至数据库。用户对某个主题或字号较为心仪，可以保存至云端，以便下次登陆时能够快速加载，节省用户时间。

3.2.5	电子书商店
	该模块展示了电子书商店内的所有书籍，用户可以在电子书商店内方便快速的添加个人喜欢的书籍至个人书库。添加完成后书籍会保存至云端的个人书单，下次登陆时不会丢失。

3.2.6	个人书库
	该模块用来展示用户个人曾经添加过的书籍，用户可以选自书籍进行阅读，也可以删除书籍。

3.3 功能模块划分
	清楚各个功能需求后，可以将应用划分为以下几个模块：
（1）登录注册模块：用户登录，用户注册，修改密码，个人信息查看；
（2）电子书阅读模块：电子书展示，左右翻页，呼出相关菜单；
（3）阅读设置模块：设置主题，调整阅读进度，同步数据；
（4）默认设置模块：设置主题，设置字号；
（5）电子书商店模块：展示商店图书，添加个人书籍；
（6）个人书库模块：展示个人书库，切换月度书籍，删除个人书籍。


应用的功能模块划分如图3-1所示。
 


3.4 系统流程分析
	轻读电子书阅读打开后，会分为两种情况。第一种情况是本地没有用户缓存，系统会自动加载默认电子书，并且会提示用户操作方式等。如果本地有用户的缓存数据，则会自动加载用户的相应设置信息，阅读信息，自动展示给用户。整个系统的打开流程如图3-2所示。

 

图3-2 系统打开流程
下面对几个复杂程度较高的功能模块进行流程图解析。

3.4.1   注册登录模块
	主要处理用户注册、登录事件，以及将用户登陆数据缓存，方便快速登录，如图3-3所示。

 

图3-3 注册登录模块


3.4.2   电子书展示模块
	主要处理电子书的展示、渲染，上下翻页，主题字号的内容，如图3-4所示。

 

图3-4 电子书展示模块

3.4.3   商店与书库模块
	主要处理电子书商店、个人书库的展示，以及添加选中删除等操作，如图3-5所示。

 

图3-5 商店与书库模块

3.4.4   其他模块
	其他模块包含修改密码，以及阅读设置模块，如图3-6所示。
 

图3-6 其他模块


3.5  本章小结
	本章对整体应用进行了大致的分析，对涉及到的相关模块的操作和运行流程进行了描述。每一个模块分成数个细分功能，各个功能在操作上不同程度地存在关联性，通过流程图进行了演示。 
第四章 数据存储设计
	 本应用分为前端和后端，由于前后端各司其职又联合紧密，因此两端用各自的方式单独实现数据存储。在后端存储使用了MySQL数据库，前端则采用了localStorage存储本地数据进行缓存。

4.1   服务端数据库设计
4.1.1   用户基本信息模块
	包括登录所需要输入的用户名、密码。E-R图如图4-1所示：

 

图4-1 用户基本信息


4.1.2   用户阅读信息模块
	用户阅读信息模块涉及到的数据较多，每个用户都有不同的阅读信息。对于每位用户，用id唯一标志记录。需要说明的是，由于阅读信息与用户信息采用分表管理，故在新用户注册后因产生一条阅读信息数据，所以在注册时就会自动添加一行记录。整体E-R图如图4-2所示：

 


图4-2 阅读信息
4.1.3   书库模块
	因为图书书库不随用户变化而变化，用户在添加书籍时只是在关联表内添加一条记录，故书库模块采用单独的一张表去记录图书信息。书库清单需要用合理的方式展示给用户，所以数据库内亦存储了图书的封面url。E-R图如图4-3所示：

 
图4-3 书库模块

4.1.4   图书用户关联表
	关联表存储的就是每位用户添加过的书籍记录。因为需要连接查询，所以字段非常简单，用户id和图书id来自于用户表和图书表的主键。E-R图如图4-4所示：

 
图4-4 图书用户关联表



4.2   客户端数据存储设计
	由于前端页面是运行在用户手机上，更多的数据需要从服务器后端请求，前端需要存储的内容较少，故采用浏览器内置的“localStorage”存储用户信息。从系统整体角度来看，本地存储的信息只作为辅助之用，用于用户快速登陆快速加载图书等，优化用户的体验。而localStorage特性使然，在本地存储只能以键值对的形式，且存储内容均为字符串。本地存储键值对如表4-1所示：

表4-1 客户端表结构
Key	Value	说明
user	`用户id`	缓存用户登陆名
bookurl	`图书地址`	缓存图书url，以便下次快速加载







4.3  数据表的设计
4.3.1  后端
（1）用户信息表
用户信息表（user）用于存放用户id和密码信息，如表4-2所示。
表4-2 用户信息表
字段名	类型	是否允许NULL值	说明
id	varchar(20)	否	主键，用户登录id
password	varchar(20)	否	用户密码

（2）阅读信息表
	阅读信息表（readinginfo）用于存放每个用户的阅读信息，用于前端加载书籍使用。注意由于阅读进度需要存储中文，故表在创建当初就应考虑到对中文的支持，将编码格式从默认改为utf8。如表4-3所示。
表4-3 专业课程表
字段名	类型	是否允许null值	说明
id	varchar(20)	否	用户id
bookurl	varchar(80)	是	当前阅读书籍url
progress	varchar(80)	是	阅读进度提示
defaulttheme	char(1)	是	默认主题
defaultfontsize	char(2)	是	默认字号

（3）书籍信息表
	书籍信息表(book)存放所有具体的详细书籍信息，通过固定的一个接口展现在书籍商店内。由于书籍名称也存有中文汉字，故同上表在创建之初修改了编码格式为utf8。如表4-3所示。

表4-4 书籍信息表
字段名	类型	是否允许null值	说明
bookid	varchar(20)	否	记录id
bookname	varchar(80)	是	课程名id
bookurl	varchar(160)	是	教室id
bookimg	varchar(640)	是	教师id

（4）图书用户关联表
	图书用户关联表（usertobook）存放用户所拥有的书籍序号。由于每个用户可以拥有多个书籍，且系统可以多用户使用，用户与书籍的对应关系为多对多，所以采用了关联表的设计。当用户添加了书籍后，就在该关联表内添加一条记录，存储的内容为用户id和图书id，查询用户图书时就向此表发送查询请求，后再向图书表发送请求查询图书其他信息。如表4-5所示。
表4-5 话题表
字段名	类型	是否允许null值	说明
id	varchar(20)	否	用户id
bookid	varchar(20)	否	图书id



4.3.2  前端
	客户端数据存储作为辅助之用，仅保存了用户的登录信息和当前书籍url。浏览器localStorage的存储特性决定它只能以键值对的形式存储字符串，所以本地存储相较于后端的数据库存储，少了字段类型，是否允许null值等。相较于后端关系型数据库，前端的localStorage存储数据其实更像NoSQL中的键值存储（key-value）数据库。内容如下如表4-6所示。
表4-6 课程信息表
字段名	说明
id	用户id
bookurl	书籍url

4.4   本章小结
	本章对前后端涉及的数据库表和字段详细地展示了出来，通过E-R图和表格的形式加以描述。部分表之间通过外键进行关联，保证数据的一致性，前端部分主要为后端提供缓存功能。
 
第五章 应用界面和逻辑代码实现
	本应用以前端为重点，前端代码处理了非常多的实现逻辑，采用前后端分离的开发好处之一便是能够将展示与数据分离彻底解耦合，本章将通过详细的界面展示和代码阐述，来全面介绍前后端部分的实现。
5.1  前端部分
5.1.1  前端业务封装
	想要写出简洁，容易阅读的代码，学会封装是必不可少的过程之一。将可复用的代码进行封装，将代码块抽象成多个相对独立的模块，能够大大减少复制粘贴的代码，提高开发效率和代码质量，使得代码更容易进行维护。而vue.js中的组件提供给我们强大的封装能力，vue也对每个组件提供了相同的生命周期钩子。该应用把所有可复用的代码放在全局GLOBAL对象内，将其作为组件的形式，挂载在main实例上。以下将展示全局GLOBAL对象的核心代码部分。
5.1.1.1  Cube UI
由于应用使用到了DiDi团队的Cube UI前端开源框架，而此框架中部分组件使用起来略有繁琐，便将其封装至GLOBAL对象内。封装的内容有Loading组件，toast组件。
Toast组件使用代码：

5.1.1.2  axios
	axios，是基于promise，用于浏览器和node.js中，是前端代码中的http客户端。它主要用作向后台发送请求，并且在请求中可以做更多的控制。由于该应用较为简单，axios的众多繁杂配置项在开发中一般用不到，故此将其封装为myaxios，以简化代码。需要说明的是，在开发时，前后端已约定好发送、返回数据均为json格式，类似于http状态码，返回的数据中也包含名为“code”的数据，用以标识此次请求是否出现异常，无异常时“code”状态码为0，出现异常时，名为message的数据携带出错信息，此外，所有数据均包含于名为data的字段内。
myaxios使用代码：
5.1.1.3  css样式
Html代码中，由于无法嵌套、类名绑定、层叠样式、样式继承等众多原因，Css样式代码管理一度也较为混乱。为了代码逻辑清晰，层次明了，在开发过程中选择Css预处理器scss。使用scaa，在写样式表时可以像html代码一样进行嵌套而不是每个html元素都用一个类名，可以为代码增加变量以减少代码重复，可以手动编写函数以增加代码可读性。由于css样式编写内容过多，在论文内省略scss代码也不失为一个好选择，以下所有代码均省略scss部分。
5.1.1.4  其他
对于一些需要频繁使用的数据（例如字号选择列表），或者未来有可能需要修改的数据（http请求基地址），亦或者未来有可能添加的新功能（主题列表），将这部分使用到的数据、代码放在GLOBAL内，可以方便的进行管理、扩展。
代码（部分）：
5.1.2  阅读主界面
阅读界面在vue里由一个单独的vue组件组成，是vue-router的首页。首页由于提供了阅读，设置，跳转等的众多功能，较为复杂。首页包含的内容如下。
5.1.2.1  图书展示
图书展示主要由npm开源插件epubjs来负责。Epubjs是一款方便的电子书解析插件，使用epubjs插件，可以快速地构建出能够解析epub格式电子书的h5应用。根据官方文档提供的api，需要在h5页面里提供一个挂载锚点，并通过实例化的book对象进行epub的解析，rendition将其渲染在挂载锚点并设置主题字号等内容，location对象用来定位电子书位置。
在此应用内，锚点为标签id=area的div构成，而personal标签div是跳转个人中心的按钮，mask为透明遮罩层，用来遮挡电子书并提供左右翻页点击事件。其余非核心代码已省略。图书展示JavaScript代码严格按照epubjs提供api生命周期钩子执行，故此不再赘述。界面如图5-1所示。
 


5.1.2.2  阅读设置部分
	 阅读设置部分作为阅读的辅助功能，内嵌在阅读界面。用户可以添加阅读记录，设置字号、主题，还可以通过拖拉的方式快读定位到自己想看的部分。该部分在阅读时并不会刻意展示，只作为辅助用户阅读之用。由于手机屏幕不比电脑，用户需要用手指头点击屏幕来完成操作，故该部分以抽屉弹出层的形式展现给用户，用户可以方便的呼出和隐藏。弹出层也做了相应的动画，界面看起来舒适美观，不生硬。界面如图5-2所示。

 
图5-2 阅读设置
5.1.2.3  跳转个人中心
	个人中心作为用户的管理设置中心，需要有一个明显的入口，并且能够方便快速的进入。应用开发时考虑到此，便把该入口放在界面左下角，以一个圆形头像、浮动按钮的形式直观展示给用户。同阅读设置一样，用户也可以方便的呼出、隐藏个人中心的按钮，呼出、隐藏也都做了相应的动画，界面生动流畅不僵硬。个人中心按钮上图已有展示，如图5-2。


5.1.3  个人中心页面
个人中心页面类似于客户端app的个人中心，提供了用户预览用户名，访问书籍商店，管理我的书籍，设置默认主题和默认字号，提供退出登录的功能。其中登陆注册，是使用的弹出层实现，弹出层为单独一个组件，内写好了注册、登陆的界面代码与逻辑实现，默认设置功能为picker选择器弹出层，书籍商店和我的书架功能则是跳转至第二个页面，以供用户进行更多操作。该界面通过阅读主界面的个人中心按钮进行跳转。界面如图5-3所示。

 
图5-3 个人中心页面

5.1.4  主题、字号设置弹出层
	点击默认主题、默认字号设置，就会弹出一个选择器弹出层，该弹出层使用了cubeui的picker，界面动画流畅美观，h5适配良好。数据源为GLOBAL全局内的选择列表，可以方便地进行后期修改。该部分设置由于会同步到云端，需要向后台发送数据，故在代码中有update方法以供调用。弹出层界面如图5-4所示。

 
图5-4 字号设置页面
5.1.5  登录注册页面
	登陆注册页面提供了用户登录、注册的功能。该功能以一个单独的组件形式进行管理，并没有写在个人中心页面，充分发挥了vue组件的强大作用。该页面以弹出层形式供用户进行操作，弹出层在弹出后还会将背景变灰，能够将用户的注意力集中在注册/登陆上。该界面如图5-5所示。

 
图5-5 登陆注册界面

5.1.6  商店、书架页面
	商店、书架页面作为单独的页面，在个人中心点击后会发生相应的跳转。由于两个页面均为展示书籍列表，HTML代码较为相似，放在一起阐述会比较节省论文空间。商店页面展示的是左右书籍，而书架页面展示的则是用户所拥有的书籍。相对应的点击事件也需要与后端服务器数据库同步，此处同步代码与以上代码较为相似，故省略。如图5-6所示。

  
图5-6 书籍商店(左)、个人书架(右)

5.2  后端部分
	后端由于需要给前端提供http请求接口，并完成连接数据库等操作，使用了python中较为轻型的web框架flask。借助于python的灵活便利，Flask框架可以方便地以路由的形式提供接口，并且可以自由的定义接口返回内容。
5.2.1  数据库连接
	后端接口的实现少不了数据库的连接，python连接MySQL有个很方便的插件PyMySQL，利用该插件，可以将事先写好的SQL语句像控制台一样在python里执行。根据PyMySQL连接MySQL数据库的规则，每次连接，请求完成之后都要进行释放连接的操作，故此将其业务逻辑写为类，每次请求时都会实例化该类产生实体连接对象，在连接，请求完毕之后，类比于c++的析构函数，添加一条关闭方法，将连接释放，完成一次数据库操作请求。代码如下（部分）：


5.2.2  http接口实现
	http接口的实现得益于flask框架的支持，可以很方便的添加注解来标识路由。不同的路由对应不同的方法，执行不同的操作。在开发初期，前后端已约定好发送、返回数据均为json格式，类似于http状态码，返回的数据中也包含名为“code”的数据，用以标识此次请求是否出现异常，无异常时“code”状态码为0，出现异常时，名为message的数据携带出错信息，此外，所有返回数据均包含于名为data的字段内。需要说明的是，由于浏览器有同源限制，不同源的数据不能够直接访问，flask访问时需要在信息里添加CORS访问控制才能够被浏览器正常解析，所以在代码中均添加了CORS访问控制信息。由于代码有部分重复，在此各选取了GET请求和POST请求的代码。代码如下：


5.3	本章小结
	本章是该应用详细设计和实现章节，以上一章的具体分析为根据，从应用总体开始到数据库，再到各个功能模块的具体设计和实现。一步一个脚印，一点一点开发，至此该应用所有的功能基本上都实现了。
 
第六章 总结与展望
6.1 总结
	软件开发，是一项神圣而伟大的工程。大到外表恢弘壮阔，小到内部事无巨细。想要开发一款好的应用，仅仅纸上谈兵远远不够，还需要手动实操，才能做出一款好的应用。本次项目是我做过的唯一一次前后端全体承包的项目。尽管前端的知识在实习时已有所了解，但后端的技术栈、框架还是头次接触。该应用功能点较多，且联合调试也困难重重，尽管如此，在老师，同学的帮助下，在我无数次翻阅知网论文、百度、谷歌、github下，我还是竭尽我所能，将其大体完成了。
	该项目采用的是前端较为新颖流行的MVVM架构模式，该模式拆分了页面和模型，使得开发时逻辑有序，前后端各司其职。得益于该开发模式，开发初期时有了好的整体规划，我本人简陋的编码习惯也能写出较为有序的代码。而后期添加新功能时，也可以像搭积木一样，不用修改新的代码就可以接入。
	该应用由于主要运行在手机端，秉承着“少即是多”的概念，应用开发时也并没有添加过多干预用户的功能，并且参考了数款阅读软件界面设计，简约的界面能够给用户带来较为良好的体验。
	在软件发展非常迅速地今天，前端框架也是层出不穷，GitHub上优秀的开源库也是数不胜数。这些开源库极大地提升了开发者的开发速度，再加上目前的前端技术已经十分成熟，对于广大的开发者而言，前人造的“轮子”已经十分好用。前端技术深似海，这一技术栈非常值得我们学习，同时开发中使用过的设计模式，思想，架构等，也很值得我们去思考，借鉴。
	在后端服务器方面，Python也是一门十分优秀的编程语言，其简洁的编程风格在众多编程语言中独树一帜。而我个人对于python web框架flask的掌握并不是很熟练，代码也没有像前端一样进行良好的封装，导致出现了许多重复无意义的代码。这给我以后的后端开发也敲起了警钟。
	流行的前后端分离架构，使得前后端各司其职的同时也让数据传输成为困难之一。流行的数据交互格式有XML和json两种，而这个项目则采用较为通用的json传输，一来是前端JavaScript原生支持json，能够很方便的解析，二是后端的python包含字典结构，声明好字典，即可以方便的转换为json来传递给前端。
	


6.2 展望
	当然，这个项目中还有许多可以改进的地方，也还可以增加很多功能点。比如进度功能，自动保存进度而不是用户手动输入，能够极大地改善用户体验；提供修改用户名、密码的功能也可以使用户使用账户时不至于茫然无措；应用还可以加入更加友好的提示，让第一次使用的用户能够友好的使用；应用还可以添加自行上传电子书功能，可以让用户阅读自己想看的书籍。可以优化的地方还有很多，这款应用距离完美还差的非常非常远。
	系统整体架构方面使用了MVVM框架，但其实还可以更加仔细地设计。在本应用中，view层相对来说提供了最为复杂的逻辑设计，尽管这样做减轻了后端的逻辑负担，但是变相的也加重了前端的负担，直观的体验就是，页面经常会卡顿一下，有时候甚至会请求失败。这对于用户来说，是极度不友好的体验。另外，对数据库的操作也是该应用值得优化的地方之一。该应用涉及到的表较少，查询速度并没有出现瓶颈，如果出现用户量上升，或者数据量较大时，数据库操作将会变成很严重的一个文通。这些技术都有待后续的研究来解决。
	在前端代码性能方面，也有一些待优化的地方。例如，电子书加载可以保存在本地，图片加载可以以缓存的形式存储，图片初次加载只需要加载缩略图。这些本地存储如果合理使用，能够大大减轻用户的网络负担，增加用户体验。
	总之，代码的优化是无止境的，由于时间有限，该项目只是把主体的功能完成了。如果上线，以供用户使用，还有许许多多的功能点函待完成。这些方面的点滴改善，才能保证用户能够正常使用。
 
参考文献
[1]陈岩.轻量级响应式框架Vue.js应用分析[J].中国管理信息化,2018,21:181-183.
[2]海英.基于Android平台的电子图书阅读软件的设计与实现[D].北京:北京工业大学软件学院,2015:1-63.
[3]焦鹏珲.基于SpringBoot和Vue框架的电子招投标系统的设计与实现[D].南京：南京大学软件学院,2018:1-72.
[4]朱二华.基于Vue.js的Web前端应用研究[J].科技与创新,2017,20:119-121.
[5]旷志光.基于Vue.js的后台单页应用管理系统的研究与实现[J].现代计算机,2017,10:51-55.
[6]邓海文.基于web的音乐播放器的设计与实现[J].电脑知识与技术.2018,29:98-99.
[7]贾铮.HTML+CSS网页布局开发指南[M].北京: 清华大学出版社,2008.
[8]贾丛丛.基于MVVM模式的WEB前端框架的研究[D].云南:云南大学,2016．
[9]孙娉娉,李新,史广军.基于前后端分离的内容管理系统[J].科研信息化技术与应用,2016(4):70-75.
[10]孙连山.MVVM框架在Web前端的应用研究[J].电脑知识与技术,2016,12:45-46.
[11]程桂花.MVVM前后端数据交互中安全机制的研究与实现[D].杭州:浙江理工大学,2016.
[12]王志任.基于Vue.js的开发平台的设计与实现[D].广州:广州工业大学,2018.
[13]刘斌,张雄,胡明浩.实验室选课系统web后端设计[J].软件开发.2018,1:51-71.
[14]邓雯婷.基于Vue.js构建单页面GIS应用的方法研究[J].创新前沿.2018,14:5-10.
[15]刘红卫.利用Node.js开发前后端分离的系统—以图书馆地方文献系统为例[J].天津科技.2018,7:67-70.
[16]戈家龙,吴红亚,杨保华.基于SSM的前后端分离电商网站的设计与实践[J].电脑知识与技术,2018,13:276-277.
[17]麦冬,陈涛,梁宗湾.轻量级响应式框架Vue.js应用分析[J].计算机工程应用技术,
2017,7:58-59.
[18]杜艳美,黄晓芳.面向企业级 web 应用的前后端分离开发模式及实践[J].西南科技大学学报,2018,33:83-87.
[19] Theo D'Hondt.ECOOP 2010 Object Oriented Programming[M]. Berlin:Springer Berlin Heidelberg,2010.
[20]王辰,刘晓鑫,曹晓燕,王佳楠.基于Vue.js平台的Markdown标记语言插件的研究与实现[J].电子信息,2018,12:82-85.
 
致谢
	本次毕业设计前前后后共经历了半年之余，虽然最后成果只是一个网络应用，再加一篇论文，但是凝聚了大学四年所有学到的知识，其中的很多技术都用到了操作系统、计算机网络、数据结构、软件工程等等计算机专业课程的东西。在此，非常感谢所有教授这些课程的老师，当时上课的时候并不能直接感受到课程的重要性，一旦参与到实际的项目开发，才发现这些计算机基础知识所起到的作用。
	同时感谢指导我毕业设计的靡元根老师，在整个毕业设计过程中给予悉心指导，使得学习生涯和将来的工作生涯得到了很好的衔接。
	另外，在毕业设计项目的前期，由于第一次独自开发大型项目，对于系统架构方面没有经验。幸好我实习的公司的项目组长给了我一些建议，才得以顺利开始开发一个高扩展性、高代码重用性的系统，之后大量的业务需求很容易地慢慢加上去了。
	最后，感谢学校给予的这次锻炼机会，让我有机会对学过的知识活学活用，从而加深对大学几年学过的知识进行有效总结，这对我以后的职业生涯是大有裨益的。
	大学四年就这样结束了，以后走上工作岗位以后就没人指点，完全靠自学了。
不过相信大学四年学习的各种计算机基础课程，足以让我在面对新技术的时候能快速掌握。感谢大学期间所有帮助过我的人。



